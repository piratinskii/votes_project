# Файл настроек БД
import sqlite3

"""
Мы могли бы создать Базу Данных один раз физически сами, но это не очень удобно, поэтому мы создадим её программно.
Для этого мы делаем отдельную функцию, которая будет создавать БД, если она ещё не создана, согласно схеме таблиц.
В нашей работе мы используем SQLite, т.к. он не требует установки и удобен для небольших проектов. По факту различия
в работе на других системах будут небольшие, для наглядности проще использовать SQLite. Эта база данных, в отличии
от большинства других не требует установки и сложной настройки и хранит данные в файле, который мы и подключаем в 
этой функции.
"""


def db_setup():
    # Подключение к БД
    conn = sqlite3.connect('voting_database.db')
    cursor = conn.cursor()

    # Создание таблицы голосующих
    """
    Схема таблицы:
    id - уникальный идентификатор голосующего (в нашем случае - номер паспорта)
    
    name - имя голосующего
    
    public_key - публичный ключ голосующего (для шифрования ZKP) - можем считать это "пригласительным билетом" на 
    выборы. Когда мы делаем свой выбор, с помощью приватного ключа (можем сказать, что это некая ключ-карта для того,
    чтобы мы могли голосовать) мы шифруем ZKP (мы шифруем некоторую фразу (набор символов), для того, чтобы мы могли
    доказать, что мы голосовали, но не раскрыть свой голос).
    
    zkp - zero-knowledge proof, доказательство нулевого знания, которое голосующий должен предоставить для того, чтобы
    его голос был принят (для подтверждения официальности ключа). Это поле будет заполнено только после того, как 
    голос уже был отдан, поэтому мы всегда сможем подтвердить, что голосовали, при этом не открывая своего голоса.
    В случае попытки подделать наш голос - zkp не сработает, так как мы не сможем его расшифровать с помощью нашего
    публичного ключа.
    """
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS voters (
        id INTEGER PRIMARY KEY,  
        name TEXT NOT NULL,
        public_key TEXT NOT NULL UNIQUE,
        zkp TEXT
    )
    ''')

    """
    Схема таблицы:
    id - уникальный идентификатор голоса
    
    encrypted_vote - зашифрованный, с помощью публичного ключа центра голосования голос
    
    tally_center_id - идентификатор центра подсчёта голосов (по условию мы используем их для того, чтобы обеспечить
    достаточную анонимность голосующих. Так они могут проголосовать в одном из центров на свой выбор, при этом каждый
    центр имеет свой публичный и приватный ключ, с помощью которых и шифруются голоса)
    """
    # Создание таблицы голосов
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS votes (
        id INTEGER PRIMARY KEY,
        encrypted_vote TEXT NOT NULL,
        tally_center_id INTEGER NOT NULL
    )
    ''')

    # Создание таблицы кандидатов
    """
    Схема таблицы:
    id - уникальный идентификатор кандидата
    name - имя кандидата
    """
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS candidates (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL
    )
    ''')

    # Создание таблицы центров подсчёта
    """
    Схема таблицы:
    id - уникальный идентификатор центра подсчёта
    name - имя центра подсчёта
    public_key - публичный ключ центра подсчёта (для шифрования голосов)
    """
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tally_centers (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        public_key TEXT NOT NULL
    )
    ''')

    # Создание таблицы результатов
    """
    Схема таблицы:
    id - уникальный идентификатор результата
    tally_center_id - идентификатор центра подсчёта, который подсчитал голоса
    result - результат подсчёта голосов
    signature - подпись центра подсчёта, который подсчитал голоса - для того, чтобы подтвердить, что голоса не были
    подделаны
    """
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tally_results (
        id INTEGER PRIMARY KEY,
        tally_center_id INTEGER NOT NULL,
        result TEXT NOT NULL,
        signature TEXT NOT NULL
    )
    ''')

    # Запись изменений в БД
    conn.commit()
    conn.close()
